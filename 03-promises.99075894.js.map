{"mappings":"YAGA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEnBG,EAAO,CAAEJ,WAAUC,S,GAErBA,E,IAZQO,SAASC,cAAc,SAC/BC,iBAAiB,UAiBxB,SAAyBC,GACvBA,EAAIC,iBAQJ,IAPA,IAAMX,EAAQY,OAAOF,EAAIG,cAAcb,MAAMc,OACvCC,EAAOH,OAAOF,EAAIG,cAAcE,KAAKD,OACrCE,EAASJ,OAAOF,EAAIG,cAAcG,OAAOF,OAE3CG,EAASjB,EAGJkB,EAAI,EAAGA,GAAKF,EAAQE,GAAG,EAC9BpB,EAAcoB,EAAGD,GACdE,MAAK,SAAAL,GACJM,QAAQC,IACN,uBAA8CC,OAArBR,EAAMf,SAAS,QAAkBuB,OAAZR,EAAMd,MAAM,M,IAG7DuB,OAAM,SAAAT,GACLM,QAAQC,IACN,sBAA6CC,OAArBR,EAAMf,SAAS,QAAkBuB,OAAZR,EAAMd,MAAM,M,IAI/DiB,GAAUF,C","sources":["src/js/03-promises.js"],"sourcesContent":["const formEL = document.querySelector('.form');\nformEL.addEventListener('submit', onPromiseSubmit);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) { \n        resolve({ position, delay });\n        } else {\n         reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n\nfunction onPromiseSubmit(evt) {\n  evt.preventDefault();\n  const delay = Number(evt.currentTarget.delay.value);\n  const step = Number(evt.currentTarget.step.value);\n  const amount = Number(evt.currentTarget.amount.value);\n\n  let delayP = delay;\n  //  let delayP = Number(delay.value);\n\n  for (let i = 1; i <= amount; i+=1) {\n    createPromise(i, delayP)\n      .then(value => {\n        console.log(\n          `✅ Fulfilled promise ${value.position} in ${value.delay}ms`\n        );\n      })\n      .catch(value => {\n        console.log(\n          `❌ Rejected promise ${value.position} in ${value.delay}ms`\n        );\n      });\n\n    delayP += step;\n  }\n}\n\n\n\n// function onPromiseSubmit(evt) {\n//   evt.preventDefault();\n//   const delay = evt.currentTarget.delay;\n//   const step = evt.currentTarget.step;\n//   const amount = evt.currentTarget.amount;\n\n//   let timerId;\n//   let amountInter = Number(amount.value);\n//   let positionP = 1;\n//   let delayP = Number(delay.value);\n\n \n \n \n//   timerId = setInterval(() => {\n//     createPromise(positionP, delayP)\n//       .then(value => {\n//         console.log(\n//           `✅ Fulfilled promise ${value.position} in ${value.delay}ms`\n//         );\n//       })\n//       .catch(value => {\n//         console.log(\n//           `❌ Rejected promise ${value.position} in ${value.delay}ms`\n//         );\n//       });\n\n//     positionP += 1;\n//     amountInter -= 1;\n//     delayP += Number(step.value);\n\n//     if (!amountInter) {\n//       clearInterval(timerId);\n//     }\n//   }, Number(step.value));\n// }\n\n\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","evt","preventDefault","Number","currentTarget","value","step","amount","delayP","i","then","console","log","concat","catch"],"version":3,"file":"03-promises.99075894.js.map"}